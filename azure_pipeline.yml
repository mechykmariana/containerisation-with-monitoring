trigger:
  branches:
    include:
      - main  # Trigger the pipeline when changes are made to main 

pool:
  vmImage: 'ubuntu-latest' # lates ubuntu image to run the pipeline

variables:
# Variables are defined in the Azure DevOps
  DOCKER_USERNAME: $(dockerUsername)
  DOCKER_PASSWORD: $(dockerPassword)
  BACKEND_IMAGE_NAME: 'django-backend'
  FRONTEND_IMAGE_NAME: 'react-frontend'
  TAG: 'latest'

stages:
  - stage: Build_and_Push
    displayName: 'Build and Push Docker Images'
    jobs:
      - job: BuildPushImages
        displayName: 'Build and Push Backend/Frontend Images'
        steps:
          # Docker Hub login
          - task: Docker@2
            displayName: 'Docker Hub Login'
            inputs:
              command: login
              containerRegistry: 'docker-service-connection'   # Service connection in Azure for Docker Hub

          # Build & Push Backend
          - task: Docker@2
            displayName: 'Build and Push Backend'
            inputs:
              command: buildAndPush
              repository: '$(DOCKER_USERNAME)/$(BACKEND_IMAGE_NAME)'
              dockerfile: 'Computex/Dockerfile'
              tags: '$(TAG)'
              containerRegistry: 'docker-service-connection'

           # Build & Push Frontend
          - task: Docker@2
            displayName: 'Build and Push Frontend'
            inputs:
              command: buildAndPush
              repository: '$(DOCKER_USERNAME)/$(FRONTEND_IMAGE_NAME)'
              dockerfile: 'ComputexFrontend/Dockerfile'
              tags: '$(TAG)'
              containerRegistry: 'docker-service-connection'

  - stage: Terraform_Deploy
    displayName: 'Terraform Deploy'
    dependsOn: Build_and_Push
    jobs:
      - job: Terraform
        displayName: 'Terraform Init & Apply'
        steps:
          # Install Terraform (Azure-provided task)
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '1.12.0'
          # Terraform Init & Apply
          - script: |
              echo "$(PRIVATE_KEY)" > terraform/azure/key_path
              chmod 600 terraform/azure/key_path
            displayName: 'Write SSH Private Key for Terraform'

          # - script: |
          #     cd terraform/azure
          #     terraform init
          #     terraform apply -auto-approve
          #   displayName: 'Terraform Init & Apply'
          - script: env | grep AZURE
            displayName: 'Print Azure environment variables'

          - script: |
              echo "ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID"
              echo "ARM_CLIENT_ID: $ARM_CLIENT_ID"
              echo "ARM_TENANT_ID: $ARM_TENANT_ID"
              echo "ARM_CLIENT_SECRET: $ARM_CLIENT_SECRET"
              echo "SYSTEM_ACCESSTOKEN: $SYSTEM_ACCESSTOKEN"
            displayName: 'Debug Azure Environment Variables'


          # - task: TerraformCLI@2
          #   displayName: 'Terraform Init'
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'init'
          #     environmentServiceNameAzureRM: 'terraform-connection'
          #     workingDirectory: 'terraform/azure'

          # - task: TerraformCLI@2
          #   displayName: 'Terraform Apply'
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'apply'
          #     environmentServiceNameAzureRM: 'terraform-connection'
          #     workingDirectory: 'terraform/azure'
          #     commandOptions: '-auto-approve'

          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: 'terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: 'terraform/azure'
              inlineScript: |
                terraform init

          - task: AzureCLI@2
            displayName: 'Terraform Apply'
            inputs:
              azureSubscription: 'terraform-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: 'terraform/azure'
              inlineScript: |
                export ARM_SUBSCRIPTION_ID="34b0240f-6b54-4633-b502-1bba02c8d5b2"
                export ARM_TENANT_ID="77eb4081-9e67-4aa5-9e95-acdc391d5849"
                export ARM_CLIENT_ID="89cf2018-f9e4-4afd-8e2a-cd67407d6c3b"
                export ARM_CLIENT_SECRET="$(ARM_CLIENT_SECRET)" # Put this in pipeline secrets!
                terraform apply -auto-approve

          
              